'use client'

import { useAiResultStore } from '@/shared/stores/ai-result-store'
import { Download, RefreshCw, Award } from 'lucide-react'
import { useState, useEffect } from 'react'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import rehypeHighlight from 'rehype-highlight'
import 'highlight.js/styles/github-dark.css'

export const LetterPreview = () => {
	const { aiText } = useAiResultStore()
	const [isLoading, setIsLoading] = useState(false)
	const [isDownloading, setIsDownloading] = useState(false)
	const [markdownContent, setMarkdownContent] = useState('')

	useEffect(() => {
		const text = aiText['ai_answer'] as string
		if (text) {
			setMarkdownContent(text)
		}
	}, [aiText])

	const handleDownload = () => {
		setIsDownloading(true)
		const blob = new Blob([markdownContent], { type: 'text/markdown' })
		const url = URL.createObjectURL(blob)
		const a = document.createElement('a')
		a.href = url
		a.download = 'selpo-generated-content.md'
		document.body.appendChild(a)
		a.click()
		document.body.removeChild(a)
		URL.revokeObjectURL(url)

		setTimeout(() => setIsDownloading(false), 500)
	}

	return (
		<div className="mt-10 flex flex-col-reverse items-center justify-center gap-5">
			<div className="flex gap-2 rounded-full border border-primary/20 bg-amber-50/80 px-4 py-1 shadow-sm backdrop-blur-sm">
				<button
					disabled={isLoading}
					className="flex items-center gap-2 text-sm hover:text-primary disabled:opacity-50"
				>
					<RefreshCw
						className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`}
					/>
					Перегенерация
				</button>
				<div className="mx-2 h-6 w-px bg-primary/20" />
				<button
					onClick={handleDownload}
					disabled={isDownloading}
					className="hover:text-primary disabled:opacity-50"
				>
					<Download
						className={`h-5 w-5 ${isDownloading ? 'animate-bounce' : ''}`}
					/>
				</button>
			</div>
			<span className="absolute bottom-4 right-4 font-mono text-[9px] uppercase tracking-widest text-primary/30">
				Generated by SELPO
			</span>
			<div className="group relative mx-auto h-auto max-h-[600px] min-h-[320px] w-full max-w-4xl transform overflow-y-auto rounded border border-dashed border-primary/30 bg-white p-6 shadow-[0_4px_30px_rgba(0,0,0,0.25)] transition-all duration-300 hover:shadow-xl">
				<div className="flex min-h-[56px] items-center gap-3 border-b border-primary/40 pb-3">
					<Award className="h-6 w-6 text-primary" />
					<h2 className="bg-gradient-to-r from-primary to-amber-900 bg-clip-text font-mono text-lg uppercase tracking-wider text-transparent">
						Сгенерированный контент
					</h2>
				</div>
				<div className="mt-4 flex min-h-0 flex-1 flex-col">
					<div className="custom-scrollbar flex-1 overflow-y-auto pr-4">
						<div className="prose prose-amber max-w-none pt-4 font-serif">
							<ReactMarkdown
								remarkPlugins={[remarkGfm]}
								rehypePlugins={[rehypeHighlight]}
								components={{
									h1: ({ node, ...props }) => (
										<h1
											className="text-3xl font-bold text-amber-800"
											{...props}
										/>
									),
									h2: ({ node, ...props }) => (
										<h2
											className="text-2xl font-semibold text-amber-700"
											{...props}
										/>
									),
									h3: ({ node, ...props }) => (
										<h3
											className="text-xl font-medium text-amber-600"
											{...props}
										/>
									),
									p: ({ node, ...props }) => (
										<p
											className="mb-4 text-justify text-amber-900"
											{...props}
										/>
									),
									ul: ({ node, ...props }) => (
										<ul
											className="ml-6 list-disc text-amber-900"
											{...props}
										/>
									),
									ol: ({ node, ...props }) => (
										<ol
											className="ml-6 list-decimal text-amber-900"
											{...props}
										/>
									),
									blockquote: ({ node, ...props }) => (
										<blockquote
											className="border-l-4 border-amber-400 pl-4 italic text-amber-700"
											{...props}
										/>
									)
								}}
							>
								{markdownContent}
							</ReactMarkdown>
						</div>
					</div>
				</div>
			</div>
		</div>
	)
}
